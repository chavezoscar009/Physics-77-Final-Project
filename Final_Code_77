import numpy as np
import matplotlib.pyplot as plt
from astropy.io import ascii

#assigning newtons gravitational constant to the value below
G = 6.674e-11

#making a solar mass variable
M_sun = 2e30 #kg

#luminosity of the sun in watts
L_sun = 3.827e26 #watts

#Solar radius in meters
R_sun = 6.957e8 #m

#Stefan-Boltzmann constant
stef_boltz = 5.67e-8

#Surface temperature of the Sun
T_sun = 5778 #K


#code that reads in the data from the files
data = ascii.read('table1.dat', readme = 'ReadMe')
data1 = ascii.read('table3.dat', readme = 'ReadMe')
data2 = ascii.read('table5.dat', readme = 'ReadMe')

#########
#OUTLINE OF CODE:
#first step we need to find the period of the binary system
#we do this by plotting the radial velocities and then we will zoom in on
#a region and see if we can deduce the period from it.
#once we have the period all we need next will be to find out the mass and average
#separation
#we can find ratio of mass by taking the ratio of radial velocities
##########


#assigning the values of radial velocity to these variables below
#as well as time, one for data set 1
#and another one for data set 2

bvmag = data['B-V']

bvmag1 = bvmag[0]
bvmag2 = bvmag[1]
bvmag3 = bvmag[2]

#this code block here just gathers the radial velocities from data set 1

#data set 1
rad_vel1 = data1['RV1']
rad_vel2 = data1['RV2']
time = data1['HJD']

#this code block here just gathers the radial velocities from data set 2 but we did not end up using it

#data set 2
rad_vel11 = data2['RV1']
rad_vel22 = data2['RV2']
time1 = data2['HJD']

#the code below will index our radial velocity so that we can zoom in on a region of interest
#in this case this will find for data set 1 the radial velocity of RV1 from when
#time is less than 54500

#initializer variable
i = 0

#list that will hold the index
time_segment = []

#while loop that loops through the condition required, in this case that time[i] < 54500
while i < len(time):
	if time[i] < 54500:
		time_segment.append(i)
	i+=1

#assigning the value of index to the length of the list, this will be used below to
#only get the time and radial velocity values that we want
index = len(time_segment)


#code that cuts away unwanted values and only focuses on the region of interest
rv1_segment = rad_vel1[:index]
time_adjusted = time[:index]


#this code is an exact copy of the above just that now we are looking at a different range
#and applying it to a different variable rad_vel2

#initializer variable
i = 0

#list that will hold the index
time_segment1 = []

#while loop that loops through the condition required in this case that 56000< time[i] < 57000
while i < len(time):
	if time[i] > 56000 and time[i] < 57000:
		time_segment1.append(i)
	i+=1

#this code here assigns to a variable where we will start in the list splicing and where we will end
#what we are looking for is something like rad_vel[start:end]
#so we need to know where to start and when to end

#code that assigns the starting and end index below
start = time_segment1[0]
end = time_segment1[-1]


#list that will hold the indexes for the zoomed in region for radial velocity 1
zoomRV1 = []

#initializing variable for loop
i=0

#finding the index for when 56200 < time[i] < 56260 and appending that to zoomRV1
while i < len(time):
	if time[i] > 56200 and time[i] < 56260:
		zoomRV1.append(i)
	i+=1

#assigning start and end splicing values for when we zoom in
zoomstart = zoomRV1[0]
zoomend = zoomRV1[-1]

#the zoomed in rad_vel and time are spliced below
#our first zoomed in value
RV1_zoom = rad_vel1[zoomstart : zoomend]
timezoom = time[zoomstart : zoomend]

#the code below will mimic what we did above but now for radial velocity 2
zoomRV2 = []

#initializing indexing variable
i=0

#while loop that appends the index for when 56200<time[i]<56300
while i < len(time):
	if time[i] > 56200 and time[i] < 56300:
		zoomRV2.append(i)
	i+=1

#assigning our starting and ending variables that will zoom in on the region for rad_vel2
zoomstart2 = zoomRV2[0]
zoomend2 = zoomRV2[-1]

#code that actually takes the piece we are interested in.
RV2_zoom = rad_vel2[zoomstart2 : zoomend2]
tprime = time[zoomstart2 : zoomend2]

#code that zooms in on rv1,rv2 and time using the previous start and end values
rv2_segment = rad_vel2[start:end]
rv1_segment2 = rad_vel1[start:end]
time_seg = time[start:end]

#this code block plots the entire data from data set 1
plt.title('Plot of the entire data set for data1')
plt.plot(time, rad_vel1,'.', label = 'Radial Velocity 1', color = 'blue')
plt.plot(time, rad_vel2,'.', label = 'Radial Velocity 2', color = 'red')
plt.xlabel('Time (days)')
plt.ylabel('Radial Velocity (km/s)')
plt.legend()
plt.savefig('Dataset1.png')
plt.show()


#code that plots the zoomed in region for radial velocity 1
plt.figure()
plt.title('Zoomed in region for RV1')
plt.scatter(time_adjusted, rv1_segment, c = 'blue')
plt.xlabel('Time (days)')
plt.ylabel('Radial Velocity (km/s)')
plt.show()

plt.figure()

plt.title('Different Zoomed in region for RV1')
plt.scatter(time_seg, rv1_segment2, c = 'blue')
plt.xlabel('Time (days)')
plt.ylabel('Radial Velocity (km/s)')
plt.savefig('Radvel1.png')
plt.show()


plt.figure()

#code that plots the zoomed in region for radial velocity 1
plt.title('Total Zoomed in region for RV1')
plt.scatter(timezoom, RV1_zoom, c = 'blue')
plt.xlabel('Time (days)')
plt.ylabel('Radial Velocity (km/s)')
plt.savefig('Rad_vel1.png')
plt.show()

plt.figure()

plt.title('Zoomed in region for RV2')
plt.scatter(time_seg, rv2_segment, c = 'red')
plt.xlabel('Time (days)')
plt.ylabel('Radial Velocity (km/s)')
plt.savefig('Radvel2.png')
plt.show()

plt.figure()

plt.title('Total Zoomed in region for RV2')
plt.scatter(tprime, RV2_zoom, c = 'red')
plt.xlabel('Time (days)')
plt.ylabel('Radial Velocity (km/s)')
plt.xlim(min(tprime), max(tprime))
plt.savefig('Rad_vel2.png')
plt.show()

#from this plot and other zoomed in regions we can calculate the orbital period in days by
#looking for one period of a sine wave


plt.figure()

######
#this code block plots the entirety of the data from data set 2
#but we did not end up using this
#it was here just in case data set 1 did not yield good graphs
######

#plt.title('Data from dataset 2')
#plt.scatter(time1, rad_vel11, c = 'blue')
#plt.scatter(time1, rad_vel22, c = 'red')
#plt.xlabel('Time (days)')
#plt.ylabel('Radial Velocity')
#plt.show()


########
#from the plots above we are able to infer that the orbital period for star 1 is of order
#35 days +/- 2 days
#and for the second object/star, we can infer that the period is about 35 days as well.
########


####
#code blocks that calculate astrophysical quantities of interest.
#these are going to include mass, period, semi-major axis
####

#converts the period into seconds which we need for keplars third law
period = 35 * 86400 #in seconds

#space in the output display
print()


#function that calculates the distance away from center of mass
#here we are assuming circular orbits and we use the fact that
#v = distance/period = 2piD/Period
#solving for D we get
#D = v*Period/(2*pi)

def separation(velocity, period):
    rCOM = (period * velocity)/(2 * np.pi)

    return rCOM

#assigning variables to quantities we need

#this first one is velocity of object 1 in meters per second
v1 = 25.6 * 1000 #converst km/s -> m/s

#assigning separation of object 1 from center of mass
a1 = separation(v1, period)

#assigning the value of velocity for object 2 in meters per second
v2 = 52.6 * 1000 #converts km/s->m/s

#assigning the value of separation from center of mass from object 2
a2 = separation(v2, period)

#calculating the total separation
a = a1+a2

#displays the total separation on the screen/display
print('Total separation is: ', a, ' meters or ', a/(1.5e11), ' AU')

#function of keplars third law
#we use this to solve for mass if we are given period and separation
#both of which we now know
def keplar(period, a):
    numerator = (4 * np.pi**2 * a**3)
    denom = G * period**2
    Mtot = numerator/denom
    return Mtot

#assigning the combined mass of the system to variable Mtot
Mtot = keplar(period, a)

#displays it on the screen
print()
print('Total mass of the system is: ', Mtot, 'kg or ', Mtot/M_sun, 'Solar Mass')

#functions that calculate the mass for each individual object
#here since we know the 2 velocities we can get the indivisual masses by taking ratios of velocities
#the exact derivation is seen in the proposal/powerpoint
def Mass2(v1, v2, Mtot):
    M2 = (v1 * Mtot)/ (v1+v2)
    return M2

def Mass1(v1, v2, Mtot):
    M1 = (v2*Mtot)/(v2+v1)
    return M1

#assinging the mass for each individual object to their respective variable
M1 = Mass1(v1, v2, Mtot)
M2 = Mass2(v1, v2, Mtot)

#displaying the results onto the screen
print()
print('Mass of object 1 is: ', M1, 'kg or ', M1/M_sun)
print()
print('Mass of object 2 is: ', M2, 'kg or ', M2/M_sun)

##########
#since both of these stars are of the order a solar mass
#they will most likely have properties like that of the Sun
#meaning that they will have a luminosity roughly equal to the sun
#surface flux and temoerature will also roughly be equal
##########


#The code below just goes and calculates more astrophysical data

#function that calculates the luminosity of the stars given their mass
def luminosity(M):
	#a bunch of if-else statements that converts a given mass range into the appropriate luminosity
	if M < .43*M_sun:
		return .23*(M/M_sun)**(2.3)*L_sun
	elif M > .43*M_sun and M < 2*M_sun:
		return (M/M_sun)**4 * L_sun
	elif M > 2*M_sun and M < 20*M_sun:
		return 1.4 * (M/M_sun)**(3.5) * L_sun
	else:
		return 'Could not calculate luminosity.'

#assigns the luminosity to the assigned variables
lum1 = luminosity(M1)
lum2 = luminosity(M2)

print()
print('Luminosty of star 1 is: ', lum1, 'Watts')
print('Luminosty of star 2 is: ', lum2, 'Watts')
print()

#######
#One thing we are missing from the data is how to calculate the individual radii of each star
#we need that so that we can calculate the surface flux of the star
#once we have that we can use Stefan-Boltzmann law to find the temperature of the star
#So we will ask the user to input a radius for us to calculate the surface flux
#######

#we will prompt the user to input a radius in terms of solar radii and from that we will calculate temperature and flux

#print('Below we will ask you to input a radius in terms of solar radii')
#print('Example: a value of 2 corresponds to 2 solar radii, 5 corresponds to 5 solar radii, etc.')

#stores the radius value that the user inputs into these variables
#radius1 = input('Please enter a value for radius for star 1: ')
#radius2 = input('Please enter a value for radius for star 2: ')

#converting string value to a float
#radii1 = float(radius1) * R_sun
#radii2 = float(radius2) * R_sun

#function that calculates the surface flux of the stars
#def flux_surface(L,R):
#	return L/(4 * np.pi * R**2)

#assigning the flux calculations to these variables
#flux1 = flux_surface(lum1,radii1)
#flux2 = flux_surface(lum2,radii2)

#Outputting the results onto the screen
#print()
#print('Surface flux for star 1 is: ', flux1, 'Watts/m^2')
#print('Surface flux for star 2 is: ', flux2, 'Watts/m^2')

#function that calculates the temperature given a flux
#which we have from above

#def Temp(F):
#	return (F/stef_boltz)**(1/4)

#assigning the temperature values to these variables

#temp1 = Temp(flux1)
#temp2 =	Temp(flux2)

#displaying the results of the calculations onto the screen

#print()
#print('Surface Temperature for star 1 is: ', temp1, '(K)')
#print('Surface Temperature for star 2 is: ', temp2, '(K)')

#function that caluclates radius with a cofactor in front

#def R(x):
#	return x * R_sun

#function that calculates the flux as radius changes

#def flux_surface1(L,R,x):
#	return L/(4 * np.pi * (R(x))**2)

#Function that calculates temperature as luminosity changes

#def Temp1(flux_surface1, L, R, x):
#	return (flux_surface1(L,R,x)/stef_boltz)**(1/4)

#changes the value of the radius

#r = range(1,11)

#Flux list so that we can plot them

#flux_list1 = [flux_surface1(lum1,R,i) for i in r]
#flux_list2 = [flux_surface1(lum2,R,i) for i in r]


#standard plotting code

#plt.title('Surface Flux as a function of Radius (for fixed Luminosity)')
#plt.plot(r,flux_list1, '.', label = 'Flux for star 1')
#plt.plot(r,flux_list2, '.', label = 'Flux for star 2')
#plt.xlim(0, len(r)+1)
#plt.xlabel('R (in solar radius)')
#plt.ylabel('Flux (W/m^2)')
#plt.legend()
#plt.show()

#for temperature radius calculations

#r1 = range(1,101)

#temp_list1 = [Temp1(flux_surface1, lum1, R, i) for i in r1]
#temp_list2 = [Temp1(flux_surface1, lum2, R, i) for i in r1]


#plotting code

#plt.figure()

#plt.title('Temperature as a function of Radius (for fixed Luminosity)')
#plt.plot(r1,temp_list1, label = 'Temperature for star 1')
#plt.plot(r1,temp_list2, label = 'Temperature for star 2')
#plt.xlabel('R (in solar radius)')
#plt.ylabel('Temperature (K)')
#plt.legend()
#plt.show()

#########
#Another piece of data that we are given is in data table1 we are given the B-V magnitude
#from that we can find the estimated surface temperature assuming that the star radiates like a blackbody
#we find that temperature by using Ballesteros formula
#########

#function that calculates the temperature of the star given its B-V magnitude
def bvtemp(bvmag):

	frac1 = 1/(.92*bvmag + 1.7)
	frac2 = 1/(.92*bvmag + .62)
	T = 4600*(frac1 + frac2)
	return T

temp_bv1 = bvtemp(bvmag1)
temp_bv2 = bvtemp(bvmag2)
temp_bv3 = bvtemp(bvmag3)

#displays the result onto the screen
print()
print('The estimated surface temperature using B-V magnitude is: ')
print('For star 1: ', temp_bv1, 'K')
print('For star 2: ', temp_bv2, 'K')
#print('For star 3: ', temp_bv3, 'K')



########
#Now that we have the temperature and luminosity of the star we can calculate what is its radius is
#using Stefan-Boltzmann law and comparing the stars to the sun
########

#function that calculates the the radius of the star given its temperature
def radii_calc(T,L):
	radii = np.sqrt(L/L_sun) * (T_sun/T)**2 * R_sun
	return radii

#assinging the values for radius to these variables
R_1 = radii_calc(temp_bv1, lum1)
R_2 = radii_calc(temp_bv2, lum2)

#output code
print()
print('The radius for star 1 is: ', R_1, 'm or ', R_1/R_sun, 'Solar Radii')
print('The radius for star 2 is: ', R_2, 'm or ', R_2/R_sun, 'Solar Radii')




#########
#That is the end of my program
#########
